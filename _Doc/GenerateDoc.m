function GenerateDoc
%GENERATEDOC Generate the documentation for all m-files in the MatlabPointCloudToolbox project. 
% The result is put in _Doc/MFilesDoc.txt.
% The function also generate the Contents.m files in the repositories.
%
% Note : the function won't work on protected files.
%
%AUTHOR  : Neal Gauvin (at a3 dot epfl dot ch)
%VERSION : 2.1
%STATUS  : Ok
%DATE    : 31 aout 2011

% Menu
file = 'MFilesDoc.txt'; % To be placed in _Doc/
DirToParse = {'PointCloud\MainLibrary','PointCloud\PointCloudAlignment',...
    'PointCloud\PointCloudComparison','PointCloud\PointCloudShapeSimulator',...
    'PointCloud\Landslide\LandslideTracking','PointCloud\Landslide\VolumeExtraction','PointCloud\Landslide\Other'};

% Go to the Root of the package.
R = what('C:\MATLAB\Matlab_pctb\PointCloud');
% Check that there is only one PointCloud folder in the Matlab path.
if length(R) ~= 1
    fprintf('Numerous folders have been found which contain a PointCloud folder :\n');
    R.path
    fprintf('Check your your Matlab path.\n');
    return;
end
cd([R.path '\..']);

% Generate first a content summary file for the toolbox, based on the
% README file.
fid = fopen('Contents.m','w');
% Open the README file.
frm = fopen('README.txt','r');
% Embodies it in Contents.m
tline = fgetl(frm);
while ischar(tline)
    str = ['% ' tline];
    fprintf(fid,'%s\n',str);
    tline = fgetl(frm);
end
fclose(frm);
fclose(fid);

% Now, generate the documentation file.
% Open doc file
fid = fopen(['_Doc/' file],'w');

% Write preambulo
fprintf(fid,'#########################################################\n');
fprintf(fid,'You will find in this document the full documentation of \n'); 
fprintf(fid,'all m-files found in the following directories :\n');
fprintf(fid,'\n');
for d = DirToParse
    fprintf(fid,' - %s \n', d{:} );
end
fprintf(fid,'\n');
fprintf(fid,'Type help dirname for a content summary of the directory.\n');
fprintf(fid,'\n');
fprintf(fid,'Do not edit this document. \n');
fprintf(fid,'It is automatically generated by the call of GenerateDoc. \n');
fprintf(fid,'#########################################################\n');
fprintf(fid,'\n');

% Loop on all dir to parse
for d = DirToParse
    D = what(d{:});
    % Start preambulo
    fprintf(fid,'#########################################################\n');
    %fprintf(fid,'%s \n', d{:} );

    % Make a Contents.m file
    makecontentsfile(d{:},'force');
    
    % Possibly print it here !
    h = help(d{:});
    fprintf(fid, h );

    % Close the preambulo
    fprintf(fid,'#########################################################\n');
    fprintf(fid,'\n');

    
    % Loop on m files
    mf = D.m;
    for imf = mf'
        % Do not take into account summary files.
        if strcmpi(imf{:},'Contents.m'), continue; end
        
        % Retrieve help
        h = help(imf{:});
        fprintf(fid,'---------------------------------------------------------\n');
        fprintf(fid, h );   
        % Now I need to find out if it is a class.
        % If it is, you can instantiate it !
        try                                                     %#ok<TRYNC>
            os = imf{:};
            os = os(1:(end-2));
            o = eval(os);
            if isa(o,'handle') || isa(o,'class')
                % It must match its name, otherwise it just might be a script returning a class.
                if strcmpi(os,class(o))
                
                % Retrieve properties
                fprintf(fid,'\nProperties\n\n' );
                op = fieldnames(o);
                % You can also use properties(o);
                % Loop on properties
                for iop = op'
                    h = help([os '.' iop{:}]);
                    fprintf(fid, h );
                end
                % Retrieve member function names
                fprintf(fid,'\nMethods\n\n' );
                om = methods(o);
                % Loop on methods
                for iom = om'
                    fprintf(fid, '%s\n', upper(iom{:}) );
                    h = help([os '.' iom{:}]);
                    fprintf(fid, h );
                    fprintf(fid, '\n' );
                end
                end %if
            end
       end
        fprintf(fid,'---------------------------------------------------------\n');
        fprintf(fid,'\n');
    end
        
    
end


% Close doc file
fclose(fid);

end