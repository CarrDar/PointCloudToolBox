% MatlabPointCloudToolbox a Matlab toolkit for the study of point clouds. 
% 
%  - Simulation of point clouds with various shapes
%  - Management of point clouds
%  - Alignement
%  - Smoothing and Gridification
%  - Sampling
%  - Visualisation
% 
% Author      Neal Gauvin (at a3 dot epfl dot ch)
% Maintainer  Dario Carrea (at unil dot ch)
% Version     v4r2 2-March-2015
% 
% ------------------------------------------------------------------------------
% Structure :
%  - Data		: folder to store your input and output data.
%  - Doc		: some useful documentation is placed here.
%  - GLTree Pro	: C++ extension to make gl tree.
%  - Examples	: folder where you will find any script you might find useful for the others.
%  - BetaPackage	: folder where you will find beta version functions.
%  - PointCloud	: the Matlab core files (see README in the folder).
%    How it is arranged :
% 	- MainLibrary : common files to all projects. In particular, it implements the PointCloud class.
% 	- PointCloudAlignment : files specific to the alignment of PointClouds.
% 	- PointCloudComparison: files specific to the comparsion of PointClouds.
% 	- ShapeSimulator : files to generate and simulate PointClouds.
% 	- Landslide: folder containing all packages specific to landslide investigations.
% 	How it is arranged :
% 		- LandslideTracking: files specific to surface displacement tracking from PointCloud.
% 		- RockfallMonitoring: files specific to rockfall extraction and volume computation from PointCloud.
% 
% ------------------------------------------------------------------------------
% 
% ------------------------------------------------------------------------------
% Requirements :
% - Matlab version >= 7.11 (R2010b) with statistical toolbox v >= 7.3
% - C++ compiler if you wish to enable GLTree Pro.
% - Compiled Point Cloud Library v >= 1.6.0 if you wish to visualize your data in PCDViewer  
% ------------------------------------------------------------------------------
% 
% ------------------------------------------------------------------------------
% Get started :
% 
%  - svn check out the trunk (head version) 
%    svn co svn://aqua.unil.ch/matlabpointcloudtoolbox/Trunk MatlabPointCloudToolbox
%    Note : intended for developpers. The head might not be stable.
%    Or a specific stable release
%    svn co svn://aqua.unil.ch/matlabpointcloudtoolbox/Tags/v*r* MatlabPointCloudToolbox
%    and place it in your favourite location.
%  - Open Matlab and add the MatlabPointCloudToolbox folder to the path, including subfolders.
%  - Start with PointCloudAlignment/DemoSim.m (simulated point clouds) or DemoReal if you have already 
%    some real data to align.
%  - Have fun !
%  - Do not hesitate to use the help and doc call on any file or repertory.
% 
% Advice to those working with the protected version :
% 
% The documentation of protected file is not available through the help and doc function because of the encryption.
% Have a look at the Doc/MFilesDoc.txt file. Everything is there !
% If the file is absent or the help content of some functions have been updated, the file can be generated by calling GenerateDoc.
% The content summary files (Contents.m) are open however, you may use help to display the content of a folder.
% Try help lib, for instance.
% 
% You may skip this part if you are not familiar with object-oriented (OO) programming.
% The toolkit presents a OO structure. let's take an example how it works.
% In lib, there is class called PointCloud, this class defines an object "PointCloud", which contains a certain number of members : properties and methods, to say data stored and functions related to your object.
% 
% Let me illustrate the advantage of this approach.
% Load some data you have store in Data, collection of 3D positions :
% pc = ImportPointCloudFromASCII('scan1.txt','Scan 1');
% You get a Matlab handle (equivalent of a pointer in Cpp) on a PointCloud object, which contains point positions.
% To access any member of your object, call YourObjectName.TheProperty.
% In our case, to access the positions, just use pc.P or pc.plot3 to visualise your points.
% 
% One benefit of working with handles is that the object resides in a specific place in the memory. You can pass the handle - somehow the address where lives pc - to any functions, only the handle will be copied and not the possibly huge data it may contain.
% 
% If you wish to compute the normals of your points, you can call the built-in function pc.ComputeNormals or just set pc.Normals = N, if some external process has already computed them.
% They are computed only once, and we know where they reside (in pc.Normals).
% No properties are automatically computed when the object is built, because it could consume a lot of time, especially if the number of points is large, for properties that won't be necessarily used.
% If you want to use the normals, just type pc.ComputeNormals. This will ensure the normals are available. If pc.Normals is not empty, they won't be re-computed.
% The same idea applies for other properties, such as the curvatures, the k-d tree, etc.
% 
% Now, if you want to apply a affine transformation to your point cloud, just call pc.transform(TM), where TM is your transform matrix.
% This function will apply the transformation to all properties concerned : the (true and measured) positions, but also to any computed normals.
% 
% On the other side, if you reset or change all or some of the positions of the cloud, this would consequently reset any depending properties, like the normals.
% 
% Finally, if you need to store a new property, just add it in the list of properties. It will be available everywhere.
% ------------------------------------------------------------------------------
% 
% ------------------------------------------------------------------------------
% Disclaimer :
% These packages come with no warranty whatsoever. The responsability is upon the user to test thoroughly that it yields results consistent with expectations. 
% 
% Please report any bug encountered by writing a mail to the maintainer.
% 
% Do not hesitate to send any requests. Propositions of code are always welcome. 
% 
% This package contains code freely adapted (see license.txt).
% A license for this code is pending.
% Feel free to adapt and distribute. Respect the license.
% ------------------------------------------------------------------------------
% 
% ------------------------------------------------------------------------------
% Release notes :
%  - head version (from the Trunk).
% 
%  - v4r2 (Dario Carrea 02/03/15):
%    Add new possibility to correct PointCloud.Intensities from raw data using surface roughness and Oren-Nayar BRDF.
% 
%  - v4r1 (Dario Carrea 01/11/14):
%    Fixing bugs from RockfallMonitoring package.
% 
%  - v4 (Dario Carrea 01/03/14):
%    New package available as RockfallMonitoring. The package offer possibility to extract, segment and compute volume from 2 different time point cloud.
% 
%  - v3r3 (01/08/13):
%    beta version of Ground-based lidar Simulator.
% 
%  - v3r2 (Dario Carrea 01/05/13):
%    beta version of Ground-based lidar Pulse Simulator.
%  
%  - v3r1 (Dario Carrea 01/02/13):
%    Fix bugs from LandslideTracking package.
% 
%  - v3 (Dario Carrea 01/07/12):
%    New package available as LandslideTracking. The package offer possibility to track rigid element at surface to compute surface displacement based on
%    PointCloudAlignment and SimulatedShape packages.
% 
%  - v2r7 (Dario Carrea 10/04/12):
%    Add new porperties as *.TLSpos; *.TLSAttributes; *.UsefulVar. A new function NormalOutTopo provide normals oriented towrad the TLS device according to TLSpos and TLSAttributes.
%  
%  - v2r6 (Dario Carrea 01/02/12):
%    Add PointCloud.Boundaries and PointCloud.ComputeOptimalNormals, plus correction of all remaining bugs for v2r5. It is now possible to choose between the mean and rms distance
%    between the matched pairs in ICP on which you want the minimisation to be done.
% 
%  - v2r5 (Dario Carrea 12/09/11):
%    Box options of SubSampling welcomes a function handle that will act on the points contained in each box.
%    Complete revamp of the documentation.
% 
%  - v2r4 (Neal Gauvin 30/08/11):
%    Integration of grid fitting tools using thin plate technology for estimation of height z=f(x,y) in a given x,y control grid : GridFit. It returns a new class MeshPointCloud.
%    Note : Matlab 2011 provides such tools in the CurveFitting toolbox, to be purchased separately. Try doc tpaps. Some GUI for splines are also praised.
%    SubSampling and PointCloud allows to create MeshPointCloud objects via calls to GridFit. Check the various documentations.
%    A newcomer : MultiResoICP gives an example how to perform multi-resolution smoothing to help the ICP algorithm to converge. See DemoSim.
%    The 'Box' option of SubSampling allows to set the box size to inf.
%    This is useful when the point cloud can be mapped such that z = f(x,y) with an unique z. Set 'Arg',{[5,5,inf]} and for each couple of x and y a single evaluation in z will be made.
%    Beware : PlotMulti3DPointClouds has been replaced by PlotMultiPointClouds and accepts a cell of (Mesh)PointCloud objects, instead of an array.
%    New shapes available : GenWaves and GenTerrain.
%    PointCloud gets an Add function to make addition of PointClouds.
% 
%  - v2r3 (Neal Gauvin 16/08/11):
%    PointCloud : added WhatColor and WhatIntensity for a given position, GetMissingPropFromPC.
%    PointCloud welcomes a new property : TMode, which allows to set how the transformation of the positions will be performed, with respect to (0,0,0), centre of gravity, a given point.
% 
% 
%  - v2r2 (Neal Gauvin 08/08/11):
%    Added new properties in PointCloud : Colors and Intensities, invariant under the transformations. New related functions : PlotPositionsWithColors, PlotPositionsWithIntensities. SubSampling integrates a color and intensity filter.
%    TransformMatrix welcomes new arguments. Backward incompatibility : the rotation angles are now passed in a single arry [a b g]. 
%    ICP : point to plane may work with translation only.
%    ICP welcomes new minimisation options allowing translations only, resizing and shears.
% 
%  - v2r1 (Neal Gauvin 22/07/11):
%    Added computation of curvature. These can be used to subsample point clouds and give weights to matching pairs of points in ICP.
% 
%  - v2r0 (Neal Gauvin 01/07/11):
%    Object-oriented design. First stable release.
% 
%  - v1 (Neal Gauvin 09/06/11): 
%    demo version. Works fine, but not optimised.
%    Data (3D point cloud) in the form of a 3xn matrix. 
% ------------------------------------------------------------------------------
% 
% ------------------------------------------------------------------------------
% Future work :
%  - develop a method to measure the (volume of) non-rigid displacement of point clouds.
% ------------------------------------------------------------------------------
